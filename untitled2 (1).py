# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gD1WnKpCiZXOpAHCMlEN9GgzRVbfaClC
"""

import numpy as np
import matplotlib.pyplot as plt
# Constants for the PV cell (typical values for a silicon panel)
Isc_ref = 5.0 # Reference short-circuit current (A)
Voc_ref = 0.6 * 36 # Reference open-circuit voltage (V) (36 cells in series)
Ns = 36 # Number of cells in series
k = 1.38064852e-23 # Boltzmann constant (J/K)
q = 1.60217662e-19 # Electron charge (C)
T_ref = 25 + 273.15 # Reference temperature (K)
G_ref = 1000 # Reference irradiance (W/m^2)
# Temperature coefficients (typical values)
alpha_Isc = 0.0005 # A/°C, short circuit current temp coeff
beta_Voc = -0.0023 # V/°C, open circuit voltage temp coeff
def pv_model(G, T):
&quot;&quot;&quot; Model PV panel I-V and P-V characteristics at irradiance G (W/m2) and temp T (°C).
Returns current (I), voltage (V), power (P), and max power point (V_mpp, I_mpp, P_mpp).
&quot;&quot;&quot;
T_k = T + 273.15 # Convert to Kelvin
# Adjust Isc and Voc for irradiance and temperature
Isc = Isc_ref * (G / G_ref) * (1 + alpha_Isc * (T - 25))

Voc = Voc_ref + beta_Voc * Ns * (T - 25)
# Diode ideality factor and saturation current assumptions
n = 1.3
Rs = 0.5 # Series resistance (ohms)
Rsh = 200 # Shunt resistance (ohms)
Io = 1e-10 # Diode saturation current (A)
Vt = n * k * T_k / q * Ns # Thermal voltage
V = np.linspace(0, Voc, 500)
# Solve implicit current I for each voltage V using Newton-Raphson method
I = np.zeros_like(V)
for i, v in enumerate(V):
I_guess = Isc
for _ in range(100):
f = I_guess - Isc + Io*(np.exp((v + I_guess*Rs)/Vt) -1) + (v + I_guess*Rs)/Rsh
df = 1 + Io*np.exp((v + I_guess*Rs)/Vt)*Rs/Vt + Rs/Rsh
I_new = I_guess - f/df
if abs(I_new - I_guess) &lt; 1e-6:
break
I_guess = I_new
I[i] = I_guess if I_guess &gt; 0 else 0 # Clamp to zero minimum current
P = V * I
# Maximum Power Point (MPP)
P_mpp_idx = np.argmax(P)
V_mpp = V[P_mpp_idx]
I_mpp = I[P_mpp_idx]
P_mpp = P[P_mpp_idx]
return V, I, P, V_mpp, I_mpp, P_mpp
def plot_pv_characteristics(G, T):
V, I, P, V_mpp, I_mpp, P_mpp = pv_model(G, T)

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(V, I, label=f&#39;Irradiance={G} W/m², Temp={T}°C&#39;)
plt.scatter(V_mpp, I_mpp, color=&#39;red&#39;, label=&#39;MPP&#39;)
plt.xlabel(&#39;Voltage (V)&#39;)
plt.ylabel(&#39;Current (A)&#39;)
plt.title(&#39;I-V Characteristic&#39;)
plt.grid(True)
plt.legend()
plt.subplot(1,2,2)
plt.plot(V, P, label=f&#39;Irradiance={G} W/m², Temp={T}°C&#39;)
plt.scatter(V_mpp, P_mpp, color=&#39;red&#39;, label=&#39;MPP&#39;)
plt.xlabel(&#39;Voltage (V)&#39;)
plt.ylabel(&#39;Power (W)&#39;)
plt.title(&#39;P-V Characteristic&#39;)
plt.grid(True)
plt.legend()
plt.suptitle(&#39;PV Panel Characteristics&#39;)
plt.show()
print(f&quot;Max Power Point at G={G} W/m², T={T}°C:&quot;)
print(f&quot;Voltage at MPP: {V_mpp:.2f} V&quot;)
print(f&quot;Current at MPP: {I_mpp:.2f} A&quot;)
Print(f&quot;Power at MPP: {P_mpp:.2f} W&quot;)
# Example usage
if __name__ == &quot;__main__&quot;:
G = 800 # Solar irradiance (W/m²)
T = 35 # Temperature (°C)
plot_pv_characteristics(G, T)